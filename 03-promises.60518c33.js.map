{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,yBACnCE,UAAWH,SAASC,cAAc,wBAClCG,YAAaJ,SAASC,cAAc,0BACpCI,IAAKL,SAASC,cAAc,WAyB9B,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAhCPV,EAAKC,KAAKiB,iBAAiB,UAE3B,SAAoBC,GAClBA,EAAEC,iBAQF,IANA,IAAMC,EAASC,SAAStB,EAAKM,YAAYiB,OACnCC,EAAQF,SAAStB,EAAKI,WAAWmB,OACjCE,EAAYH,SAAStB,EAAKK,UAAUkB,OAIjCG,EAAI,EAAGA,EAAIL,EAAQK,GAAK,EAC/BlB,EAAckB,EAAGF,EAAQE,EAAID,GAC1BE,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBZ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAE9DsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBZ,EAAA+B,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('input[name = \"delay\"]'),\n  inputStep: document.querySelector('input[name = \"step\"]'),\n  inputAmount: document.querySelector('input[name = \"amount\"]'),\n  btn: document.querySelector('button'),\n};\n\nrefs.form.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  const amount = parseInt(refs.inputAmount.value);\n  const delay = parseInt(refs.inputDelay.value);\n  const delayStep = parseInt(refs.inputStep.value);\n\n  // console.log(delay, delayStep, amount);\n\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i, delay + i * delayStep)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","inputDelay","inputStep","inputAmount","btn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","amount","parseInt","value","delay1","delayStep","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.60518c33.js.map"}